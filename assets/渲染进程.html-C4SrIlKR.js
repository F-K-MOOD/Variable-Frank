import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as e,o as r}from"./app-qIylsfBC.js";const s={};function a(n,i){return r(),t("div",null,[...i[0]||(i[0]=[e('<h2 id="浏览器渲染进程" tabindex="-1"><a class="header-anchor" href="#浏览器渲染进程"><span>浏览器渲染进程</span></a></h2><h3 id="浏览器有很多进程-与前端相关的是渲染-render-进程-这个进程下有很多线程" tabindex="-1"><a class="header-anchor" href="#浏览器有很多进程-与前端相关的是渲染-render-进程-这个进程下有很多线程"><span>浏览器有很多进程, 与前端相关的是渲染 render 进程, 这个进程下有很多线程</span></a></h3><ul><li><strong>gui 渲染线程</strong>, 负责解析 HTML、CSS，构建 DOM 树、CSSOM 树，布局和绘制页面</li><li><strong>javascript 引擎线程</strong>, 负责执行 js 脚本</li><li><strong>网络线程</strong>, 处理网络资源请求，如 HTML、CSS、JS 文件的下载</li><li><strong>事件触发线程</strong>, 管理事件循环，将用户交互、定时器等事件加入任务队列</li><li><strong>定时触发线程</strong>, 管理 setTimeout、setInterval 等定时任务</li><li><strong>合成图层</strong>, 负责将各个图层合成到一起</li></ul><h3 id="页面渲染完整过程-线程协作版" tabindex="-1"><a class="header-anchor" href="#页面渲染完整过程-线程协作版"><span>页面渲染完整过程(线程协作版)</span></a></h3><h4 id="阶段一-网络请求与解析准备" tabindex="-1"><a class="header-anchor" href="#阶段一-网络请求与解析准备"><span>阶段一：网络请求与解析准备</span></a></h4><ol><li>用户输入 URL → 浏览器进程接收 → 通知网络线程</li><li>网络线程发起 HTTP 请求 → 下载 HTML 文档</li><li>下载完成后 → 将 HTML 数据传递给渲染进程的主线程</li></ol><h4 id="阶段二-dom-构建与资源发现" tabindex="-1"><a class="header-anchor" href="#阶段二-dom-构建与资源发现"><span>阶段二：DOM 构建与资源发现</span></a></h4><ul><li><p>解析 HTML 字节流 → 构建 DOM 树</p></li><li><p>遇到 link 标签 → 通知网络线程下载 CSS（不阻塞 DOM 构建）</p></li><li><p>遇到/script 标签 → 分类处理</p><p>情况 A：普通 script（无 async/defer）</p><ul><li>暂停 DOM 构建</li><li>等待网络线程下载 JS</li><li>JS 下载完成后立即执行（阻塞 GUI 线程）</li></ul><p>情况 B：async script</p><ul><li>异步下载，不阻塞 DOM 构建</li><li>下载完成后立即执行（可能中断当前渲染）</li></ul><p>情况 C：defer script</p><ul><li>异步下载，不阻塞 DOM 构建</li><li>等待 DOM 构建完成后再执行</li></ul></li></ul><h4 id="阶段三-样式计算与布局" tabindex="-1"><a class="header-anchor" href="#阶段三-样式计算与布局"><span>阶段三 样式计算与布局</span></a></h4><ul><li>所有 CSS 下载完成后 → 解析 CSS 规则 → 构建 CSSOM 树</li><li>合并 DOM 树和 CSSOM 树 → 生成渲染树（Render Tree）</li></ul><ol start="6"><li>布局计算（Layout/Reflow）： <ul><li>计算每个<strong>渲染树节点的位置和大小</strong></li><li>生成布局树（Layout Tree）</li></ul></li></ol><h4 id="阶段五-图层分层与绘制指令" tabindex="-1"><a class="header-anchor" href="#阶段五-图层分层与绘制指令"><span>阶段五：图层分层与绘制指令</span></a></h4><ol start="7"><li>图层管理：</li></ol><ul><li>根据 <strong>z-index、transform</strong> 等属性将布局树分层</li><li>生成<strong>图层树</strong>（Layer Tree）</li><li>为每个图层生成绘制指令列表（Paint Records）</li></ul><ol start="8"><li><strong><em>主线程将图层树和绘制指令提交给合成线程</em></strong></li></ol><h4 id="阶段六-光栅化与合成" tabindex="-1"><a class="header-anchor" href="#阶段六-光栅化与合成"><span>阶段六：光栅化与合成</span></a></h4><ol start="9"><li>合成线程接收主线程提交的数据：</li></ol><ul><li>将每个图层的绘制指令分发给光栅化线程池</li></ul><ol start="10"><li>光栅化线程工作： <ul><li>将矢量绘制指令转换为位图像素</li><li>处理视口内和附近区域的图块（Tiles）</li></ul></li><li>合成线程收集所有光栅化完成的图块： <ul><li>按照<strong>图层顺序</strong>合成最终图像</li><li>通过 IPC 将最终帧提交给浏览器进程</li></ul></li></ol><h4 id="阶段七-显示与后续更新" tabindex="-1"><a class="header-anchor" href="#阶段七-显示与后续更新"><span>阶段七： 显示与后续更新</span></a></h4><ol start="12"><li><p>浏览器进程将合成好的帧发送给 GPU 进程</p></li><li><p>GPU 进程通过图形 API 将图像显示到屏幕上</p></li><li><p>后续更新机制：</p><ul><li>事件触发线程监控用户交互</li><li>定时器线程管理 setTimeout/setInterval</li><li>当需要更新时，重新回到阶段三开始渲染流程</li></ul></li></ol><h3 id="线程与性能优化" tabindex="-1"><a class="header-anchor" href="#线程与性能优化"><span>线程与性能优化</span></a></h3><ol><li>js 引擎线程和渲染线程是互斥的, 也就是说在执行 js 脚本的时候, 渲染线程是不执行的, 为了防止堵塞页面渲染, 可以使用 defer 或者 async 属性, 让 js 脚本延迟加载. 再使用 vuecli 或者 vite 等构建工具进行开发时, 会自动处理脚本加载顺序, 但是我们可以使用<strong>路由懒加载, 进行分割代码, 减少初始代码体积</strong></li><li>如果后端返回了很多条数据, 一下全部渲染到页面上, 会造成页面卡顿, 这是因为用户的设备大部分是 60Hz 的, 也就是一秒钟要渲染 60 次, 两次渲染的时间间隔是 16.66ms, 可能出现的两种情况：<br><strong><em>JS 执行时间超过 16.66ms</em></strong>：GUI 渲染线程根本没能开始执行，浏览器直接跳过当前帧的渲染<br><strong><em>JS 执行时间虽未超时，但剩余时间不足完成渲染</em></strong>：比如 JS 执行了 15ms，虽然 GUI 线程可以开始工作，但渲染管线需要 8ms，总时间 23ms 仍然超过 16.66ms 的帧预算，导致无法在下一帧刷新前完成渲染</li><li>transform 和 opcity 属性会创建新的图层, 当这些属性发生变化时, 不会重新进行布局, 而是利用 gpu 加速,在合成线程中完成图形变换</li><li>利用 will-change 属性, 可以提前告知浏览器, 页面即将发生的变化, 这样浏览器可以提前准备好相应的资源, 避免页面闪烁</li></ol>',23)])])}const h=l(s,[["render",a]]),c=JSON.parse('{"path":"/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86/%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B.html","title":"","lang":"zh-CN","frontmatter":{"description":"浏览器渲染进程 浏览器有很多进程, 与前端相关的是渲染 render 进程, 这个进程下有很多线程 gui 渲染线程, 负责解析 HTML、CSS，构建 DOM 树、CSSOM 树，布局和绘制页面 javascript 引擎线程, 负责执行 js 脚本 网络线程, 处理网络资源请求，如 HTML、CSS、JS 文件的下载 事件触发线程, 管理事件循环，...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-23T08:51:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"frank.js\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/Variable-Frank/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86/%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"变量弗兰克"}],["meta",{"property":"og:description","content":"浏览器渲染进程 浏览器有很多进程, 与前端相关的是渲染 render 进程, 这个进程下有很多线程 gui 渲染线程, 负责解析 HTML、CSS，构建 DOM 树、CSSOM 树，布局和绘制页面 javascript 引擎线程, 负责执行 js 脚本 网络线程, 处理网络资源请求，如 HTML、CSS、JS 文件的下载 事件触发线程, 管理事件循环，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-23T08:51:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-23T08:51:23.000Z"}]]},"git":{"createdTime":1758617483000,"updatedTime":1758617483000,"contributors":[{"name":"xuqi","username":"xuqi","email":"zhangxuqi2001@163.com","commits":1,"url":"https://github.com/xuqi"}]},"readingTime":{"minutes":3.83,"words":1149},"filePathRelative":"posts/浏览器原理/渲染进程.md","excerpt":"<h2>浏览器渲染进程</h2>\\n<h3>浏览器有很多进程, 与前端相关的是渲染 render 进程, 这个进程下有很多线程</h3>\\n<ul>\\n<li><strong>gui 渲染线程</strong>, 负责解析 HTML、CSS，构建 DOM 树、CSSOM 树，布局和绘制页面</li>\\n<li><strong>javascript 引擎线程</strong>, 负责执行 js 脚本</li>\\n<li><strong>网络线程</strong>, 处理网络资源请求，如 HTML、CSS、JS 文件的下载</li>\\n<li><strong>事件触发线程</strong>, 管理事件循环，将用户交互、定时器等事件加入任务队列</li>\\n<li><strong>定时触发线程</strong>, 管理 setTimeout、setInterval 等定时任务</li>\\n<li><strong>合成图层</strong>, 负责将各个图层合成到一起</li>\\n</ul>","autoDesc":true}');export{h as comp,c as data};
