import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as n,o as a}from"./app-Db9alGA2.js";const o={};function s(p,t){return a(),r("div",null,[...t[0]||(t[0]=[n('<h2 id="请求的二次封装" tabindex="-1"><a class="header-anchor" href="#请求的二次封装"><span>请求的二次封装</span></a></h2><h3 id="基础配置" tabindex="-1"><a class="header-anchor" href="#基础配置"><span>基础配置</span></a></h3><p>配置<strong>baseUrl</strong>, <strong>timeout</strong>, <strong>headers</strong></p><h3 id="第一层请求拦截器-响应拦截器" tabindex="-1"><a class="header-anchor" href="#第一层请求拦截器-响应拦截器"><span>第一层请求拦截器, 响应拦截器</span></a></h3><p>在请求拦截器中, <strong>headers</strong>中注入 token,<br> 在响应拦截器中, 做<strong>token</strong>失效, <strong>权限不足</strong>, <strong>接口不存在</strong>等错误的统一处理, 比如</p><ul><li>响应状态码为 401,表示 token 失效,跳转到登录页面.</li><li>响应状态码为 403,表示权限不足,跳转到首页.</li><li>响应状态码为 404,表示接口不存在,跳转到 404 页面</li></ul><h3 id="第二层请求拦截器-响应拦截器" tabindex="-1"><a class="header-anchor" href="#第二层请求拦截器-响应拦截器"><span>第二层请求拦截器, 响应拦截器</span></a></h3><p>前提, 根据 config 生成请求的唯一的 id, id = url+method+params+data, 创建一个<strong>map</strong>, key 为 <strong>id</strong>,value 为 <strong>取消请求的函数</strong><br> 在请求拦截器中处理重复请求, 具体来说如果 map 中存在 id, 则取消之前的请求, 然后将当前请求加入 map<br> 在响应拦截器里, 取消请求, 删除响应成功后的 map 中的 id 和响应失败后的 map 中的 id</p><h3 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点"><span>注意点</span></a></h3><p>Map 和对象进行键的搜索和属性的删除, 时间复杂度都是 O(1), 那为什么使用 map 而不是使用 Map 呢?<br> 主要还是考虑到 map 的键的安全性, 因为 map 的键会保留类型也不会进行隐式转换, 然后 map 的 api 更加语义化,比如 has, set.</p><p>还有一个 map 的使用场景就是封装错误响应状态码的映射表, 比如<br> new map([<br> 400, &#39;参数错误&#39;,<br> 401, &#39;未登录&#39;,<br> 403, &#39;无权限&#39;,<br> 404, &#39;接口不存在&#39;,<br> 500, &#39;服务器错误&#39;<br> ])</p>',11)])])}const m=e(o,[["render",s]]),d=JSON.parse('{"path":"/posts/%E9%A1%B9%E7%9B%AE%E6%B5%81/%E8%AF%B7%E6%B1%82%E7%9A%84%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85.html","title":"","lang":"zh-CN","frontmatter":{"description":"请求的二次封装 基础配置 配置baseUrl, timeout, headers 第一层请求拦截器, 响应拦截器 在请求拦截器中, headers中注入 token, 在响应拦截器中, 做token失效, 权限不足, 接口不存在等错误的统一处理, 比如 响应状态码为 401,表示 token 失效,跳转到登录页面. 响应状态码为 403,表示权限不足,...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-22T02:03:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"frank.js\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/Variable-Frank/posts/%E9%A1%B9%E7%9B%AE%E6%B5%81/%E8%AF%B7%E6%B1%82%E7%9A%84%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85.html"}],["meta",{"property":"og:site_name","content":"变量弗兰克"}],["meta",{"property":"og:description","content":"请求的二次封装 基础配置 配置baseUrl, timeout, headers 第一层请求拦截器, 响应拦截器 在请求拦截器中, headers中注入 token, 在响应拦截器中, 做token失效, 权限不足, 接口不存在等错误的统一处理, 比如 响应状态码为 401,表示 token 失效,跳转到登录页面. 响应状态码为 403,表示权限不足,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-22T02:03:48.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-22T02:03:48.000Z"}]]},"git":{"createdTime":1758506628000,"updatedTime":1758506628000,"contributors":[{"name":"xuqi","username":"xuqi","email":"zhangxuqi2001@163.com","commits":1,"url":"https://github.com/xuqi"}]},"readingTime":{"minutes":1.33,"words":398},"filePathRelative":"posts/项目流/请求的二次封装.md","excerpt":"<h2>请求的二次封装</h2>\\n<h3>基础配置</h3>\\n<p>配置<strong>baseUrl</strong>, <strong>timeout</strong>, <strong>headers</strong></p>\\n<h3>第一层请求拦截器, 响应拦截器</h3>\\n<p>在请求拦截器中, <strong>headers</strong>中注入 token,<br>\\n在响应拦截器中, 做<strong>token</strong>失效, <strong>权限不足</strong>, <strong>接口不存在</strong>等错误的统一处理, 比如</p>\\n<ul>\\n<li>响应状态码为 401,表示 token 失效,跳转到登录页面.</li>\\n<li>响应状态码为 403,表示权限不足,跳转到首页.</li>\\n<li>响应状态码为 404,表示接口不存在,跳转到 404 页面</li>\\n</ul>","autoDesc":true}');export{m as comp,d as data};
