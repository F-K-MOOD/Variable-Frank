import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-Db9alGA2.js";const s={};function o(r,t){return n(),a("div",null,[...t[0]||(t[0]=[e('<h2 id="this" tabindex="-1"><a class="header-anchor" href="#this"><span>this</span></a></h2><h3 id="this的定义" tabindex="-1"><a class="header-anchor" href="#this的定义"><span>this的定义:</span></a></h3><p>是JavaScript的<strong>关键字</strong>, 是函数运行时生成的对象, 指向调用函数的对象</p><h3 id="this的绑定规则" tabindex="-1"><a class="header-anchor" href="#this的绑定规则"><span>this的绑定规则:</span></a></h3><ul><li>默认绑定, 默认绑定到<strong>全局对象</strong>上(浏览器环境下是window, node环境下是global), 例子是函数单独调用</li><li>隐式绑定, 作为<strong>对象方法调用时</strong></li><li>显式绑定, 比如call,apply,bind</li><li>new绑定, 使用new关键字执行构造函数时, <strong>this指向新创建的对象</strong></li><li>一些特例,</li></ul><h3 id="call-apply-bind的区别" tabindex="-1"><a class="header-anchor" href="#call-apply-bind的区别"><span>call, apply, bind的区别?</span></a></h3><p>call和apply绑定后会立即执行, 这两者的区别是<strong>参数传递方式</strong>, call接受参数列表, apply接受参数数组<br> bind绑定后不会立即执行, 会返回一个新的函数, 这个新函数拥有和原函数一样的原型, 在调用这个返回后的函数时, 可以普通调用, 那么this指向的bind的第一个参数, 如果是new关键字调用, 那么this指向new关键字执行时创建的新创建的对象</p>',7)])])}const h=i(s,[["render",o]]),c=JSON.parse('{"path":"/posts/JavaScript/this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98.html","title":"","lang":"zh-CN","frontmatter":{"description":"this this的定义: 是JavaScript的关键字, 是函数运行时生成的对象, 指向调用函数的对象 this的绑定规则: 默认绑定, 默认绑定到全局对象上(浏览器环境下是window, node环境下是global), 例子是函数单独调用 隐式绑定, 作为对象方法调用时 显式绑定, 比如call,apply,bind new绑定, 使用new关...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-21T16:42:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"frank.js\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/Variable-Frank/posts/JavaScript/this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"变量弗兰克"}],["meta",{"property":"og:description","content":"this this的定义: 是JavaScript的关键字, 是函数运行时生成的对象, 指向调用函数的对象 this的绑定规则: 默认绑定, 默认绑定到全局对象上(浏览器环境下是window, node环境下是global), 例子是函数单独调用 隐式绑定, 作为对象方法调用时 显式绑定, 比如call,apply,bind new绑定, 使用new关..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-21T16:42:03.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-21T16:42:03.000Z"}]]},"git":{"createdTime":1758472923000,"updatedTime":1758472923000,"contributors":[{"name":"xuqi","username":"xuqi","email":"zhangxuqi2001@163.com","commits":1,"url":"https://github.com/xuqi"}]},"readingTime":{"minutes":0.88,"words":265},"filePathRelative":"posts/JavaScript/this指向问题.md","excerpt":"<h2>this</h2>\\n<h3>this的定义:</h3>\\n<p>是JavaScript的<strong>关键字</strong>, 是函数运行时生成的对象, 指向调用函数的对象</p>\\n<h3>this的绑定规则:</h3>\\n<ul>\\n<li>默认绑定, 默认绑定到<strong>全局对象</strong>上(浏览器环境下是window, node环境下是global), 例子是函数单独调用</li>\\n<li>隐式绑定, 作为<strong>对象方法调用时</strong></li>\\n<li>显式绑定, 比如call,apply,bind</li>\\n<li>new绑定, 使用new关键字执行构造函数时, <strong>this指向新创建的对象</strong></li>\\n<li>一些特例,</li>\\n</ul>","autoDesc":true}');export{h as comp,c as data};
