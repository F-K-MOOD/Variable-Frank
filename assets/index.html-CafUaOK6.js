import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as o,b as a,d as n,e,w as i,r as p,o as E}from"./app-qIylsfBC.js";const d={};function u(m,t){const r=p("RouteLink");return E(),l("div",null,[t[12]||(t[12]=o('<h1 id="_404-found" tabindex="-1"><a class="header-anchor" href="#_404-found"><span>404 found</span></a></h1><p>欢迎来到我的前端技术博客！</p><h2 id="📚-主要内容" tabindex="-1"><a class="header-anchor" href="#📚-主要内容"><span>📚 主要内容</span></a></h2><h3 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>JavaScript</span></a></h3>',4)),a("ul",null,[a("li",null,[n(r,{to:"/posts/JavaScript/%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F.html"},{default:i(()=>[...t[0]||(t[0]=[e("实现继承方式",-1)])]),_:1}),t[1]||(t[1]=e(" - JavaScript各种继承方式的详细解析",-1))]),a("li",null,[n(r,{to:"/posts/JavaScript/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%96%B9%E6%A1%88.html"},{default:i(()=>[...t[2]||(t[2]=[e("异步编程方案",-1)])]),_:1}),t[3]||(t[3]=e(" - 从回调到async/await的完整异步编程解决方案",-1))])]),t[13]||(t[13]=a("h3",{id:"浏览器原理",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#浏览器原理"},[a("span",null,"浏览器原理")])],-1)),a("ul",null,[a("li",null,[n(r,{to:"/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86/%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86.html"},{default:i(()=>[...t[4]||(t[4]=[e("渲染原理",-1)])]),_:1}),t[5]||(t[5]=e(" - 浏览器渲染流程、重排重绘、事件循环等核心原理",-1))]),a("li",null,[n(r,{to:"/posts/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.html"},{default:i(()=>[...t[6]||(t[6]=[e("缓存机制",-1)])]),_:1}),t[7]||(t[7]=e(" - 浏览器缓存策略、Service Worker、存储机制",-1))])]),t[14]||(t[14]=a("h3",{id:"前端工程化",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#前端工程化"},[a("span",null,"前端工程化")])],-1)),a("ul",null,[a("li",null,[n(r,{to:"/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/Webpack%E6%9E%84%E5%BB%BA%E5%8E%9F%E7%90%86.html"},{default:i(()=>[...t[8]||(t[8]=[e("Webpack构建原理",-1)])]),_:1}),t[9]||(t[9]=e(" - Webpack核心概念、构建流程、优化策略",-1))]),a("li",null,[n(r,{to:"/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/Vite%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7.html"},{default:i(()=>[...t[10]||(t[10]=[e("Vite构建工具",-1)])]),_:1}),t[11]||(t[11]=e(" - Vite特性、配置、性能优化和最佳实践",-1))])]),t[15]||(t[15]=o('<h2 id="🎯-学习目标" tabindex="-1"><a class="header-anchor" href="#🎯-学习目标"><span>🎯 学习目标</span></a></h2><p>通过这个博客，您将掌握：</p><ol><li><strong>JavaScript核心技术</strong>：继承机制、异步编程的深度理解</li><li><strong>浏览器工作原理</strong>：渲染流程、缓存机制、性能优化</li><li><strong>前端工程化</strong>：构建工具、打包优化、开发效率提升</li><li><strong>最佳实践</strong>：现代前端开发的标准和规范</li></ol><h2 id="💡-特色" tabindex="-1"><a class="header-anchor" href="#💡-特色"><span>💡 特色</span></a></h2><ul><li><strong>系统性强</strong>：按照技术领域分类，便于系统学习</li><li><strong>实用性强</strong>：每个概念都配有实际代码示例</li><li><strong>循序渐进</strong>：从基础到高级，逐步深入</li><li><strong>现代技术</strong>：使用最新的前端技术和工具</li></ul><h2 id="🚀-技术栈" tabindex="-1"><a class="header-anchor" href="#🚀-技术栈"><span>🚀 技术栈</span></a></h2><ul><li><strong>前端框架</strong>：Vue 3, React</li><li><strong>构建工具</strong>：Vite, Webpack</li><li><strong>开发语言</strong>：JavaScript, TypeScript</li><li><strong>样式方案</strong>：CSS3, Sass, Less</li><li><strong>工程化</strong>：ESLint, Prettier, Husky</li></ul>',7))])}const h=s(d,[["render",u]]),f=JSON.parse('{"path":"/","title":"404 found","lang":"zh-CN","frontmatter":{"description":"404 found 欢迎来到我的前端技术博客！ 📚 主要内容 JavaScript - JavaScript各种继承方式的详细解析 - 从回调到async/await的完整异步编程解决方案 浏览器原理 - 浏览器渲染流程、重排重绘、事件循环等核心原理 - 浏览器缓存策略、Service Worker、存储机制 前端工程化 - Webpack核心概念、...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"404 found\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-21T04:03:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"frank.js\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/Variable-Frank/"}],["meta",{"property":"og:site_name","content":"变量弗兰克"}],["meta",{"property":"og:title","content":"404 found"}],["meta",{"property":"og:description","content":"404 found 欢迎来到我的前端技术博客！ 📚 主要内容 JavaScript - JavaScript各种继承方式的详细解析 - 从回调到async/await的完整异步编程解决方案 浏览器原理 - 浏览器渲染流程、重排重绘、事件循环等核心原理 - 浏览器缓存策略、Service Worker、存储机制 前端工程化 - Webpack核心概念、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-21T04:03:23.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-21T04:03:23.000Z"}]]},"git":{"createdTime":1758396441000,"updatedTime":1758427403000,"contributors":[{"name":"xuqi","username":"xuqi","email":"zhangxuqi2001@163.com","commits":3,"url":"https://github.com/xuqi"}]},"readingTime":{"minutes":1.34,"words":403},"filePathRelative":"README.md","excerpt":"\\n<p>欢迎来到我的前端技术博客！</p>\\n<h2>📚 主要内容</h2>\\n<h3>JavaScript</h3>\\n<ul>\\n<li><a href=\\"/Variable-Frank/posts/JavaScript/%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F.html\\" target=\\"_blank\\">实现继承方式</a> - JavaScript各种继承方式的详细解析</li>\\n<li><a href=\\"/Variable-Frank/posts/JavaScript/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%96%B9%E6%A1%88.html\\" target=\\"_blank\\">异步编程方案</a> - 从回调到async/await的完整异步编程解决方案</li>\\n</ul>","autoDesc":true}');export{h as comp,f as data};
